precision mediump float;

attribute vec3 position;
attribute vec3 normal;

uniform mat4 projection;
uniform mat4 model;
uniform vec3 camera_position;

varying vec3 normal_m;
varying vec3 normal_w;

varying vec3 position_w;
varying vec3 position_e;

varying vec4 color;

void calc_position() {
	/* Model position of vertex */
	vec3 position_m = position;
	/* World position of vertex */
	position_w = (model * vec4(position_m, 1.0)).xyz;
	/* Position of vertex relative to camera (eye) */
	position_e = (position_w - camera_position);
	/* Projected position of vertex */
	vec4 position_p = projection * vec4(position_e, 1.0);
	/* Output */
	gl_Position = position_p;
}

void calc_normal() {
	/* Model direction of normal */
	normal_m = normal;
	/* World direction of normal */
	normal_w = normalize(mat3(model) * normal_m);
}

void main() {
	calc_position();
	calc_normal();
}
